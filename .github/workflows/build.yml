name: Build and Release ECT Technis Electron App

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Get version
      id: get_version
      run: |
        if (Test-Path version.txt) {
          $version = Get-Content version.txt -Raw
          $version = $version.Trim()
        } else {
          $version = "1.1.0"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        
        # Update package.json version
        $packageJson = Get-Content -Path package.json -Raw | ConvertFrom-Json
        $packageJson.version = $version
        $packageJson | ConvertTo-Json -Depth 100 | Set-Content -Path package.json
    
    - name: Check if tag exists
      id: check_tag
      run: |
        $tagExists = git tag -l "v${{ steps.get_version.outputs.VERSION }}"
        if ("$tagExists" -eq "v${{ steps.get_version.outputs.VERSION }}") {
          echo "TAG_EXISTS=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "TAG_EXISTS=false" >> $env:GITHUB_OUTPUT
        }
    
    - name: Install dependencies
      run: |
        # Python dependencies
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Node.js dependencies
        npm install --legacy-peer-deps
        npm install -g electron-builder
    
    - name: Create CHANGELOG if missing
      run: |
        if (!(Test-Path "CHANGELOG.md")) {
          @"
        # Changelog
        
        ## v${{ steps.get_version.outputs.VERSION }}
        
        ### Features
        - Excel file comparison tool with advanced matching algorithms
        - Dynamic header detection for flexible file structures  
        - Multiple comparison modes (full, quick, custom)
        - Comprehensive report generation (Excel, CSV, PDF formats)
        - Site mapping and configuration management
        - Real-time comparison progress tracking
        
        ### Technical
        - Built with Electron + Flask architecture
        - Python backend with pandas/openpyxl for Excel processing
        - Modern HTML5/CSS3/JavaScript frontend
        - Windows x64 native application
        - Portable and installer distribution options
        - No external dependencies required
        
        ### Installation
        - **ECT_Technis_Setup_v${{ steps.get_version.outputs.VERSION }}.exe**: Full installer with shortcuts
        - **ECT_Technis_Portable_v${{ steps.get_version.outputs.VERSION }}.exe**: Portable version, no installation needed
        
        ### System Requirements  
        - Windows 10/11 (x64)
        - 4GB RAM recommended
        - 100MB free disk space
        "@ | Set-Content -Path "CHANGELOG.md"
          Write-Host "CHANGELOG.md created"
        } else {
          Write-Host "CHANGELOG.md already exists"
        }
    
    - name: Verify source files exist
      run: |
        $requiredFiles = @(
          "src/backend/app.py",
          "src/electron/main.js", 
          "src/frontend/index.html",
          "src/frontend/images/icon_excel_comparison.ico",
          "package.json",
          "requirements.txt"
        )
        
        $missingFiles = @()
        foreach ($file in $requiredFiles) {
          if (!(Test-Path $file)) {
            $missingFiles += $file
            Write-Warning "Missing required file: $file"
          }
        }
        
        if ($missingFiles.Count -gt 0) {
          Write-Error "Build cannot continue - missing required files: $($missingFiles -join ', ')"
          exit 1
        }
        Write-Host "All required files found ✓"
    
    - name: Prepare secure build
      run: |
        # Create secure build directory
        New-Item -Path "secure_src" -ItemType Directory -Force
        New-Item -Path "secure_src\backend" -ItemType Directory -Force
        New-Item -Path "secure_src\core" -ItemType Directory -Force
        New-Item -Path "secure_src\models" -ItemType Directory -Force
        New-Item -Path "secure_src\utils" -ItemType Directory -Force
        
        # Copy Python files with error checking
        Write-Host "Copying Python backend files..."
        if (Test-Path "src\backend") {
          Copy-Item src\backend\*.py secure_src\backend\ -Force -ErrorAction SilentlyContinue
          Write-Host "Backend files copied ✓"
        }
        
        if (Test-Path "src\core") {
          Copy-Item src\core\*.py secure_src\core\ -Force -ErrorAction SilentlyContinue
          Write-Host "Core files copied ✓"
        }
        
        if (Test-Path "src\models") {
          Copy-Item src\models\*.py secure_src\models\ -Force -ErrorAction SilentlyContinue
          Write-Host "Models files copied ✓"
        }
        
        if (Test-Path "src\utils") {
          Copy-Item src\utils\*.py secure_src\utils\ -Force -ErrorAction SilentlyContinue
          Write-Host "Utils files copied ✓"
        }
        
        # Copy frontend and electron
        Write-Host "Copying frontend and electron files..."
        Copy-Item src\frontend secure_src\ -Recurse -Force
        Copy-Item src\electron secure_src\ -Recurse -Force
        Write-Host "Frontend and Electron files copied ✓"
        
        # Copy documentation if exists
        if (Test-Path "docs") {
          Copy-Item docs secure_src\ -Recurse -Force
          Write-Host "Documentation copied ✓"
        }
        
        # Copy requirements.txt
        Copy-Item requirements.txt secure_src\requirements.txt -Force
        Write-Host "Requirements.txt copied ✓"
        
        # Verify critical files were copied
        $criticalFiles = @(
          "secure_src\backend\app.py",
          "secure_src\electron\main.js",
          "secure_src\frontend\index.html",
          "secure_src\frontend\images\icon_excel_comparison.ico"
        )
        
        foreach ($file in $criticalFiles) {
          if (!(Test-Path $file)) {
            Write-Error "Critical file not copied: $file"
            exit 1
          }
        }
        Write-Host "All critical files verified ✓"
    
    - name: Update package.json for build
      run: |
        # Create backup
        Copy-Item package.json package-original.json
        
        # Update package.json to use secure source
        $packageJson = Get-Content -Path package.json -Raw | ConvertFrom-Json
        $packageJson.main = "secure_src/electron/main.js"
        
        # Fix icon path to use copied icon
        $packageJson.build.win.icon = "secure_src/frontend/images/icon_excel_comparison.ico"
        
        $packageJson | ConvertTo-Json -Depth 100 | Set-Content -Path package.json
        Write-Host "Package.json updated for build ✓"
    
    - name: Build Electron app
      run: |
        Write-Host "Building Electron application..."
        
        # Build both installer and portable versions
        npx electron-builder --win --x64 --publish=never
        
        # Verify build outputs
        if (Test-Path "dist") {
          Write-Host "`nBuild artifacts created:"
          Get-ChildItem -Path dist -Filter "*.exe" | ForEach-Object {
            $sizeInMB = [math]::Round($_.Length / 1MB, 2)
            Write-Host "  ✓ $($_.Name) - Size: $sizeInMB MB"
          }
        } else {
          Write-Error "Build failed - no dist folder created"
          exit 1
        }
    
    - name: Restore original package.json
      run: |
        if (Test-Path "package-original.json") {
          Copy-Item package-original.json package.json -Force
          Remove-Item package-original.json
          Write-Host "Original package.json restored ✓"
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ECT_Technis_v${{ steps.get_version.outputs.VERSION }}
        path: |
          dist/*.exe
        retention-days: 90
    
    - name: Create and push tag if needed
      if: steps.check_tag.outputs.TAG_EXISTS == 'false' && github.event_name != 'workflow_dispatch'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a v${{ steps.get_version.outputs.VERSION }} -m "Release version ${{ steps.get_version.outputs.VERSION }}"
        git push origin v${{ steps.get_version.outputs.VERSION }}

    - name: Create GitHub Release
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        files: |
          dist/*.exe
        name: ECT Technis v${{ steps.get_version.outputs.VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}