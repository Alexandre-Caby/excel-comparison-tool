name: Build and Release Excel Comparison Tool

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install pyarmor
        pip install -r requirements.txt
    
    - name: Get version from file
      id: get_version
      run: |
        if (Test-Path version.txt) {
          $version = Get-Content version.txt -Raw
          $version = $version.Trim()
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        } else {
          # Get version from git tag or default
          $gitTag = git describe --tags --exact-match 2>$null
          if ($gitTag) {
            $version = $gitTag -replace '^v', ''
          } else {
            $version = "1.0.0"
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        }
    
    - name: Check if tag exists
      id: check_tag
      run: |
        $tagExists = git tag -l "v${{ steps.get_version.outputs.VERSION }}"
        if ("$tagExists" -eq "v${{ steps.get_version.outputs.VERSION }}") {
          echo "TAG_EXISTS=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "TAG_EXISTS=false" >> $env:GITHUB_OUTPUT
        }
    
    - name: Verify project structure
      run: |
        # Verify entry point exists
        if (Test-Path src/backend/app.py) {
          echo "Entry point src/backend/app.py exists"
        } else {
          echo "Entry point src/backend/app.py does not exist"
          Get-ChildItem -Path . -Recurse -Filter "*.py" | Select-Object FullName
          exit 1
        }
        
        # List project structure for debugging
        echo "Project structure:"
        Get-ChildItem -Path . -Recurse | Where-Object { $_.Name -match '\.(py|txt|md)$' } | Select-Object FullName

    - name: Obfuscate Code with PyArmor
      run: |
        # Create output directory
        New-Item -Path "dist_obf" -ItemType Directory -Force
        
        # Simple recursive obfuscation from entry point
        pyarmor obfuscate --recursive --output dist_obf src/backend/app.py
        
        # Copy non-Python assets
        if (Test-Path "src/frontend") {
          Copy-Item -Path "src/frontend" -Destination "dist_obf/" -Recurse -Force
        }
        if (Test-Path "static") {
          Copy-Item -Path "static" -Destination "dist_obf/" -Recurse -Force
        }
        if (Test-Path "templates") {
          Copy-Item -Path "templates" -Destination "dist_obf/" -Recurse -Force
        }
        if (Test-Path "assets") {
          Copy-Item -Path "assets" -Destination "dist_obf/" -Recurse -Force
        }
        
        # Verify obfuscation worked
        if (Test-Path "dist_obf/app.py") {
          echo "Obfuscation successful"
        } else {
          echo "Obfuscation failed - copying original files"
          Copy-Item -Path "src/*" -Destination "dist_obf/" -Recurse -Force
        }

    - name: Build executable with PyInstaller
      run: |
        
        # Build with PyInstaller using direct parameters instead of spec file
        $version = "${{ steps.get_version.outputs.VERSION }}"
        python -m PyInstaller --onefile --windowed `
          --name "ECT_Technis_v$version" `
          --icon "src/frontend/images/icon_excel_comparison.ico" `
          --add-data "version.txt;." `
          --add-data "assets/*;assets" `
          --add-data "templates/*;templates" `
          --add-data "static/*;static" `
          --paths="dist_obf" `
          dist_obf/app.py

        # Verify the build
        if (Test-Path "dist/ECT_Technis_v$version.exe") {
          echo "Build successful"
        } else {
          echo "Build failed - executable not found"
          Get-ChildItem -Path "dist" -ErrorAction SilentlyContinue
          exit 1
        }

    - name: Test executable
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        # Basic test to ensure the executable can start
        $proc = Start-Process -FilePath "dist/ECT_Technis_v$version.exe" -PassThru -WindowStyle Hidden
        Start-Sleep -Seconds 10
        if (-not $proc.HasExited) {
          Stop-Process -Id $proc.Id -Force
          echo "Executable test passed - application started successfully"
        } else {
          echo "Warning: Executable exited quickly - may have issues"
          # Don't fail the build for this warning
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ECT_Technis_v${{ steps.get_version.outputs.VERSION }}
        path: |
          dist/ECT_Technis_v${{ steps.get_version.outputs.VERSION }}.exe
        retention-days: 90
    
    - name: Create and push tag if needed
      if: steps.check_tag.outputs.TAG_EXISTS == 'false' && github.event_name != 'workflow_dispatch'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a v${{ steps.get_version.outputs.VERSION }} -m "Release version ${{ steps.get_version.outputs.VERSION }}"
        git push origin v${{ steps.get_version.outputs.VERSION }}

    - name: Generate release notes if missing
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        if (!(Test-Path RELEASE_NOTES.md)) {
          $version = "${{ steps.get_version.outputs.VERSION }}"
          echo "# ECT Technis v$version" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## What's New" >> RELEASE_NOTES.md
          echo "- Updated to version $version" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo "1. Download the executable file" >> RELEASE_NOTES.md
          echo "2. Run ECT_Technis_v$version.exe" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## System Requirements" >> RELEASE_NOTES.md
          echo "- Windows 10 or later" >> RELEASE_NOTES.md
          echo "- No additional installation required" >> RELEASE_NOTES.md
        }

    - name: Create GitHub Release
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        files: |
          dist/ECT_Technis_v${{ steps.get_version.outputs.VERSION }}.exe
        name: ECT Technis v${{ steps.get_version.outputs.VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload debug artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-artifacts-${{ steps.get_version.outputs.VERSION }}
        path: |
          dist_obf/
          build/
          *.spec
          *.log
        retention-days: 7