name: Build and Release Excel Comparison Tool

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Get version from file
      id: get_version
      run: |
        if (Test-Path version.txt) {
          $version = Get-Content version.txt -Raw
          $version = $version.Trim()
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        } else {
          # Get version from git tag or default
          $gitTag = git describe --tags --exact-match 2>$null
          if ($gitTag) {
            $version = $gitTag -replace '^v', ''
          } else {
            $version = "1.0.0"
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        }
    
    - name: Check if tag exists
      id: check_tag
      run: |
        $tagExists = git tag -l "v${{ steps.get_version.outputs.VERSION }}"
        if ("$tagExists" -eq "v${{ steps.get_version.outputs.VERSION }}") {
          echo "TAG_EXISTS=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "TAG_EXISTS=false" >> $env:GITHUB_OUTPUT
        }
    
    - name: Verify project structure
      run: |
        # Verify entry point exists
        if (Test-Path src/backend/app.py) {
          echo "Entry point src/backend/app.py exists"
        } else {
          echo "Entry point src/backend/app.py does not exist"
          Get-ChildItem -Path . -Recurse -Filter "*.py" | Select-Object FullName
          exit 1
        }
        
        # Check for icon file C:\Users\alexa\Desktop\Projets\excel-comparison-tool\src\frontend\images\icon_excel_comparison.ico
        if (Test-Path "src/frontend/images/icon_excel_comparison.ico") {
          echo "Icon file found: src/frontend/images/icon_excel_comparison.ico"
        } else {
          echo "WARNING: No icon file found in src/frontend/images"
        }
        
        # List project structure for debugging
        echo "Project structure:"
        Get-ChildItem -Path . -Recurse | Where-Object { $_.Name -match '\.(py|txt|md|ico)$' } | Select-Object FullName

    - name: Prepare build directory (without obfuscation)
      run: |
        # Create output directory
        New-Item -Path "dist_build" -ItemType Directory -Force
        
        # Copy all source files without obfuscation
        Copy-Item -Path "src/*" -Destination "dist_build/" -Recurse -Force
        
        # Copy other assets if needed
        if (Test-Path "docs") {
          Copy-Item -Path "docs" -Destination "dist_build/" -Recurse -Force
          echo "Docs copied to dist_build/docs"
        }
        
        if (Test-Path "static") {
          Copy-Item -Path "static" -Destination "dist_build/" -Recurse -Force
        }
        
        # Copy icon file if it exists
        if (Test-Path "src/frontend/images/icon_excel_comparison.ico") {
          Copy-Item -Path "src/frontend/images/icon_excel_comparison.ico" -Destination "dist_build/frontend/images/" -Force
          echo "Icon copied to dist_build/frontend/images/"
        } else {
          echo "No icon file found to copy"
        }
        
        # List final directory structure for verification
        echo "Final dist_build structure:"
        Get-ChildItem -Path "dist_build" -Recurse | Select-Object FullName

    - name: Build executable with PyInstaller
      run: |
        # Verify frontend directory exists before building
        if (Test-Path "dist_build/frontend") {
          echo "Frontend directory found at dist_build/frontend"
        } else {
          echo "ERROR: Frontend directory not found at expected location"
          Get-ChildItem -Path "dist_build" -Recurse
          exit 1
        }
        
        # Prepare PyInstaller command
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Check icon file properties and convert if needed
        $iconPath = ""
        if (Test-Path "dist_build/frontend/images/icon_excel_comparison.ico") {
          $iconPath = "dist_build/frontend/images/icon_excel_comparison.ico"
          $iconFile = Get-Item $iconPath
          echo "Icon file found: $iconPath"
          echo "Icon file size: $($iconFile.Length) bytes"
          
          # Verify icon is valid by trying to copy it to a temp location
          try {
            Copy-Item $iconPath "temp_icon.ico" -Force
            Remove-Item "temp_icon.ico" -Force
            echo "Icon file validation: PASSED"
          } catch {
            echo "Icon file validation: FAILED - $($_.Exception.Message)"
            $iconPath = ""
          }
        }
        
        # Construct PyInstaller command
        $cmd = "python -m PyInstaller --onefile --windowed " +
               "--name ""ECT_Technis_v$version"" " +
               "--add-data ""dist_build/frontend;src/frontend"" " +
                "--add-data ""dist_build/frontend/images/icon_excel_comparison.ico;src/frontend/images"" " +
               "--add-data ""version.txt;."" " +
               "--hidden-import flask " +
               "--hidden-import flask_cors " + 
               "--hidden-import pandas " +
               "--hidden-import openpyxl " +
               "--hidden-import xlsxwriter " +
               "--hidden-import werkzeug " +
               "--hidden-import numpy " +
               "--hidden-import waitress " +
               "--paths=""dist_build"" " +
               "--clean "
        
        # Add docs if they exist
        if (Test-Path "dist_build/docs") {
          $cmd += "--add-data ""dist_build/docs;docs"" "
          echo "Including docs directory"
        }
        
        # Add icon with absolute path if it exists and is valid
        if ($iconPath -ne "") {
          $absoluteIconPath = (Resolve-Path $iconPath).Path
          $cmd += "--icon=""$absoluteIconPath"" "
          echo "Using custom icon: $absoluteIconPath"
        } else {
          echo "No valid custom icon found - using default Windows icon"
        }
        
        # Add the main script
        $cmd += "dist_build/backend/app.py"
        
        # Execute PyInstaller command
        echo "Executing PyInstaller with command: $cmd"
        Invoke-Expression $cmd
        
        # Verify the build
        if (Test-Path "dist/ECT_Technis_v$version.exe") {
          echo "Build successful"
          $fileSize = (Get-Item "dist/ECT_Technis_v$version.exe").Length
          echo "Executable size: $([math]::Round($fileSize/1MB, 2)) MB"
          
          # Try to extract and verify icon information
          echo "Executable created successfully with icon support"
        } else {
          echo "Build failed - executable not found"
          Get-ChildItem -Path "dist" -ErrorAction SilentlyContinue
          exit 1
        }

    - name: Test executable
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        # Basic test to ensure the executable can start
        $proc = Start-Process -FilePath "dist/ECT_Technis_v$version.exe" -PassThru -WindowStyle Hidden
        Start-Sleep -Seconds 10
        if (-not $proc.HasExited) {
          Stop-Process -Id $proc.Id -Force
          echo "Executable test passed - application started successfully"
        } else {
          echo "Warning: Executable exited quickly - may have issues"
          # Don't fail the build for this warning
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ECT_Technis_v${{ steps.get_version.outputs.VERSION }}
        path: |
          dist/ECT_Technis_v${{ steps.get_version.outputs.VERSION }}.exe
        retention-days: 90
    
    - name: Create and push tag if needed
      if: steps.check_tag.outputs.TAG_EXISTS == 'false' && github.event_name != 'workflow_dispatch'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a v${{ steps.get_version.outputs.VERSION }} -m "Release version ${{ steps.get_version.outputs.VERSION }}"
        git push origin v${{ steps.get_version.outputs.VERSION }}

    - name: Generate CHANGELOG.md if not exists
      run: |
        if (-not (Test-Path CHANGELOG.md)) {
          echo "# Changelog" > CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [${{ steps.get_version.outputs.VERSION }}] - $(Get-Date -Format 'yyyy-MM-dd')" >> CHANGELOG.md
          echo "- Initial release" >> CHANGELOG.md
        } else {
          echo "CHANGELOG.md already exists, skipping generation."
        }

    - name: Create GitHub Release
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        files: |
          dist/ECT_Technis_v${{ steps.get_version.outputs.VERSION }}.exe
        name: ECT Technis v${{ steps.get_version.outputs.VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload debug artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-artifacts-${{ steps.get_version.outputs.VERSION }}
        path: |
          dist_build/
          build/
          *.spec
          *.log
        retention-days: 7