name: Build and Release Excel Comparison Tool

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install pyarmor
        pip install -r requirements.txt
    
    - name: Get version from file
      id: get_version
      run: |
        if (Test-Path version.txt) {
          $version = Get-Content version.txt
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        } else {
          echo "VERSION=1.0.0" >> $env:GITHUB_OUTPUT
        }
    
    - name: Check if tag exists
      id: check_tag
      run: |
        $tagExists = git tag -l "v${{ steps.get_version.outputs.VERSION }}"
        if ("$tagExists" -eq "v${{ steps.get_version.outputs.VERSION }}") {
          echo "TAG_EXISTS=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "TAG_EXISTS=false" >> $env:GITHUB_OUTPUT
        }
    
    - name: Obfuscate Code with PyArmor
      run: |
        # Create obfuscation directory
        New-Item -Path obf -ItemType Directory -Force
        
        # Obfuscate the source code
        pyarmor obfuscate --recursive --output obf/src src/*.py
        pyarmor obfuscate --recursive --output obf/src/core src/core/*.py
        pyarmor obfuscate --recursive --output obf/src/models src/models/*.py
        pyarmor obfuscate --recursive --output obf/src/pages src/pages/*.py
        pyarmor obfuscate --recursive --output obf/src/utils src/utils/*.py
        pyarmor obfuscate --output obf/ run.py main.py
        
        # Verify the obfuscated files exist
        if (-not (Test-Path obf/run.py)) {
          echo "Failed to obfuscate run.py"
          exit 1
        }
    
    - name: Build with PyInstaller
      run: |
        # Create assets directory if it doesn't exist
        if (-not (Test-Path assets)) {
          New-Item -Path assets -ItemType Directory -Force
        }
        
        # Check if static directory exists and create if needed
        if (-not (Test-Path static)) {
          New-Item -Path static -ItemType Directory -Force
          Write-Host "Created missing static directory"
        }
        
        # Check if the icon file exists
        $iconPath = "src/static/images/icon_excel_comparison.ico"
        if (-not (Test-Path $iconPath)) {
          Write-Host "Warning: Icon file not found at $iconPath"
          $iconParam = ""
        } else {
          $iconParam = "--icon=`"$iconPath`""
        }
        
        # Move to the obfuscation directory
        cd obf
        
        # Build the application with PyInstaller using obfuscated code
        # Use conditional icon parameter
        pyinstaller --onefile --noconsole --add-data "src;src" $iconParam --name "ECT_Technis-${{ steps.get_version.outputs.VERSION }}" run.py

        # Copy the executable back to the expected location
        New-Item -Path "../dist" -ItemType Directory -Force
        Copy-Item -Path "dist/ECT_Technis-${{ steps.get_version.outputs.VERSION }}.exe" -Destination "../dist/"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ECT_Technis-${{ steps.get_version.outputs.VERSION }}
        path: |
          dist/*.exe
        retention-days: 90
    
    - name: Create and push tag if it doesn't exist
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a v${{ steps.get_version.outputs.VERSION }} -m "Version ${{ steps.get_version.outputs.VERSION }}"
        git push origin v${{ steps.get_version.outputs.VERSION }}
    
    - name: Generate changelog if it doesn't exist
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        if (!(Test-Path CHANGELOG.md)) {
          echo "# Version ${{ steps.get_version.outputs.VERSION }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Changes" >> CHANGELOG.md
          echo "- Initial release of Excel Comparison Tool" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Known Issues" >> CHANGELOG.md
          echo "- None" >> CHANGELOG.md
        }

    - name: Create GitHub Release
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        files: |
          dist/ECT_Technis-${{ steps.get_version.outputs.VERSION }}.exe
        name: Version ${{ steps.get_version.outputs.VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
